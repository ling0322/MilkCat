// Copyright 2006 Nemanja Trifunovic
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 


#ifndef UTF8_H
#define UTF8_H

#include <stdint.h>
#include <iterator>

namespace utf8 {

namespace internal {

template<typename octet_type>
inline uint8_t mask8(octet_type oc) {
  return static_cast<uint8_t>(0xff & oc);
}

template <typename octet_iterator>
inline typename std::iterator_traits<octet_iterator>::difference_type
sequence_length(octet_iterator lead_it) {
  uint8_t lead = utf8::internal::mask8(*lead_it);
  if (lead < 0x80)
    return 1;
  else if ((lead >> 5) == 0x6)
    return 2;
  else if ((lead >> 4) == 0xe)
    return 3;
  else if ((lead >> 3) == 0x1e)
    return 4;
  else
    return 0;
}

} // namespace internal

template <typename octet_iterator>
octet_iterator append(uint32_t cp, octet_iterator result) {
  if (cp < 0x80)                        // one octet
    *(result++) = static_cast<uint8_t>(cp);  
  else if (cp < 0x800) {                // two octets
    *(result++) = static_cast<uint8_t>((cp >> 6)          | 0xc0);
    *(result++) = static_cast<uint8_t>((cp & 0x3f)        | 0x80);
  }
  else if (cp < 0x10000) {              // three octets
    *(result++) = static_cast<uint8_t>((cp >> 12)         | 0xe0);
    *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f) | 0x80);
    *(result++) = static_cast<uint8_t>((cp & 0x3f)        | 0x80);
  }
  else {                                // four octets
    *(result++) = static_cast<uint8_t>((cp >> 18)         | 0xf0);
    *(result++) = static_cast<uint8_t>(((cp >> 12) & 0x3f)| 0x80);
    *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f) | 0x80);
    *(result++) = static_cast<uint8_t>((cp & 0x3f)        | 0x80);
  }
  return result;
}

template <typename octet_iterator>
uint32_t next(octet_iterator& it) {
  uint32_t cp = utf8::internal::mask8(*it);
  typename std::iterator_traits<octet_iterator>::difference_type length = utf8::internal::sequence_length(it);
  switch (length) {
   case 1:
    break;
   case 2:
    it++;
    cp = ((cp << 6) & 0x7ff) + ((*it) & 0x3f);
    break;
   case 3:
    ++it; 
    cp = ((cp << 12) & 0xffff) + ((utf8::internal::mask8(*it) << 6) & 0xfff);
    ++it;
    cp += (*it) & 0x3f;
    break;
   case 4:
    ++it;
    cp = ((cp << 18) & 0x1fffff) + ((utf8::internal::mask8(*it) << 12) & 0x3ffff);                
    ++it;
    cp += (utf8::internal::mask8(*it) << 6) & 0xfff;
    ++it;
    cp += (*it) & 0x3f; 
    break;
  }
  ++it;
  return cp;        
}

} // namespace utf8


#endif